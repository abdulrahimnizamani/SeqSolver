module Amath.Expr.AbsExp
    (Ident(Ident)
    ,Pmemory(Pmem)
    ,PRule(Rule)
    ,Exp(ENull,EInt,EVar,EF,ENeg,EFunc,ERec,EAdd,ESub,EMul,EDiv,EExp,EEqual)) where

-- Haskell module generated by the BNF converter

newtype Ident = Ident String deriving (Eq,Ord)
data Pmemory =
   Pmem [PRule]
  deriving (Eq,Ord,Show)

data PRule =
   Rule Ident Integer [Exp]
  deriving (Eq,Ord)

instance Show PRule where
   show (Rule (Ident r) i xs) = r ++ "(" ++ show i ++ ") {\n" ++ show' xs ++ "}"
     where
       show' xs = concat $ map (\x -> show x ++ "\n") xs

--instance Show Equation where
--   show (EEq e1 e2) = show e1 ++ " = " ++ show e2 ++ " ;"

data Exp =
   EInt Integer
 | EVar Ident
 | EF Integer
 | ENeg Exp
 | EFunc Ident Exp
 | ERec Integer Exp
 | EAdd Exp Exp
 | ESub Exp Exp
 | EMul Exp Exp
 | EDiv Exp Exp
 | EExp Exp Exp
 | EEqual Exp Exp
 | ENull

instance Eq Exp where
    (==) = expEual

expEual :: Exp -> Exp -> Bool
expEual a b = (comp a b) == EQ

instance Ord Exp where
    compare e1 e2 = comp e1 e2

comp :: Exp -> Exp -> Ordering
comp ENull ENull = EQ
comp ENull _ = LT
comp _ ENull = GT
comp (EInt i1) (EInt i2) = compare i1 i2
comp (EInt _) _  = LT
comp _ (EInt _)  = GT
comp (EVar v1) (EVar v2) = compare v1 v2
comp (EVar _) _ = LT
comp _ (EVar _) = GT
comp (EF f1) (EF f2) = compare f1 f2
comp (EF _) _ = LT
comp _ (EF _) = GT
comp (ENeg n1) (ENeg n2) = comp n1 n2
comp (ENeg _) _ = LT
comp _ (ENeg _) = GT
comp (EFunc f1 e1) (EFunc f2 e2) = case (compare f1 f2) of
                                    EQ -> comp e1 e2
                                    v  -> v
comp (EFunc _ _) _ = LT
comp _ (EFunc _ _) = GT
comp (ERec i1 e1) (ERec i2 e2) = case (compare i1 i2) of
                                    EQ -> comp e1 e2
                                    v  -> v
comp (ERec _ _) _ = LT
comp _ (ERec _ _) = GT
comp (EAdd e1 e2) (EAdd e3 e4) = case (comp e1 e3) of
                                    EQ -> comp e2 e4
                                    LT  -> GT
                                    GT  -> LT
comp (EAdd _ _) _ = LT
comp _ (EAdd _ _) = GT
comp (ESub e1 e2) (ESub e3 e4) = case (comp e1 e3) of
                                    EQ -> comp e2 e4
                                    v  -> v
comp (ESub _ _) _ = LT
comp _ (ESub _ _) = GT
comp (EMul e1 e2) (EMul e3 e4) = case (comp e1 e3) of
                                    EQ -> comp e2 e4
                                    v  -> v
comp (EMul _ _) _ = LT
comp _ (EMul _ _) = GT
comp (EDiv e1 e2) (EDiv e3 e4) = case (comp e1 e3) of
                                    EQ -> comp e2 e4
                                    v  -> v
comp (EDiv _ _) _ = LT
comp _ (EDiv _ _) = GT
comp (EExp e1 e2) (EExp e3 e4) = case (comp e1 e3) of
                                    EQ -> comp e2 e4
                                    v  -> v
comp (EExp _ _) _ = LT
comp _ (EExp _ _) = GT
comp (EEqual e1 e2) (EEqual e3 e4) = case (comp e1 e3) of
                                    EQ -> comp e2 e4
                                    v  -> v


-----------------------
--  Show instances ----
-----------------------

instance Show Ident where
   show (Ident f) = f

instance Show Exp where
   show = showExp


showExp :: Exp -> String
showExp (EAdd e1 e2) = showExp e1 ++ "+" ++ showExp e2
showExp (ESub e1 e2) = showExp e1 ++ "-" ++ showExp' e2
showExp (EMul e1 e2) = showFactor e1 ++ "*" ++ showFactor e2
showExp (EDiv e1 e2) = showFactor e1 ++ "/" ++ showExp' e2
showExp (EInt n) = show n
showExp (EVar v) = show v
showExp (EEqual e1 e2) = showExp e1 ++ "=" ++ showExp e2
showExp (EExp e1 e2) = "(" ++ showExp e1 ++ "^" ++ showExp e2 ++ ")"
showExp (ENeg (EInt n)) = "(-" ++ show n ++ ")"
showExp (ENeg (EVar (Ident id))) = "(-" ++ id ++ ")"
showExp (ENeg e) = "-(" ++ showExp e ++ ")"
showExp (EFunc (Ident n) e1) = n ++ "(" ++ showExp e1 ++ ")"
showExp (ERec i e) = "Rec:(" ++ show i ++ "," ++ showExp e ++ ")" 
showExp (EF i) = "(EF " ++ show i ++ ")"
showExp ENull = "Null"

showExp' (EInt n) = show n
showExp' (EVar v) = show v
showExp' e = "(" ++ showExp e ++ ")"

showFactor :: Exp -> String
showFactor (EAdd e1 e2) = "(" ++ showExp e1 ++ "+" ++ showExp e2 ++ ")"
showFactor (ESub e1 e2) = "(" ++ showExp e1 ++ "-" ++ showExp e2 ++ ")"
showFactor     exp      = showExp exp
